package main

import (
	"net"
	"net/rpc"
	"log"
	"errors"
	nrpc "github.com/muzzynine/go-tcp-notification/rpc"
)

type ConnectionRPC struct {
	config *Config
}

func (crpc *ConnectionRPC)Start() {
	rpc.Register(crpc)

	go listen(crpc.config.RPCAddr)
}

func listen(rpcAddr string){
	addr, err := net.ResolveTCPAddr("tcp", rpcAddr)

	if err != nil {
		log.Print("cannot resolve tcp address")
		panic(err)
	}

	listener, err := net.ListenTCP("tcp", addr)

	if err != nil {
		log.Print("RPC Listen failed")
		panic(err)
	}

	defer func(){
		if err := listener.Close(); err != nil {
			log.Print("listener close error")
		}
	}()

	log.Printf("RPC clinet listening..")
	rpc.Accept(listener)
	log.Printf("RPC accepted")
}

func (c *ConnectionRPC) ChangeBoardSetting(args *nrpc.ChangeBoardSettingArgs, ret *int) error{
	if args == nil || args.ConId == "" {
		return errors.New("wrong argument")
	}

	conn, ok := GlobalStore.Get(args.ConId)
	if !ok {
		log.Print("Not exist connection key : %s", args.ConId)
		return errors.New("not exist connection")
	}

	msg := &SignboardMessage{command : "setting"}

	if payload, err := Serialize(msg); err != nil {
		log.Print("message serialization failed")
		return err
	} else {
		if err := conn.PushMessage(payload); err != nil {
			log.Print("push wrtie failed")
			return err
		}
	}
	return nil
}

func (c *ConnectionRPC) GetConnections(args *nrpc.GetConnectionsArgs, ret *nrpc.GetConnectionsResp) error {
	connections := GlobalStore.GetAllConnection()

	s := []nrpc.GetConnectionsDescription{}

	for _, conn := range connections {
		log.Print(conn.GetId())
		s = append(s, nrpc.GetConnectionsDescription{ConnId : conn.GetId(), ConnIPAddr : conn.GetIPAddr()})
	}

	ret.Description = s

	return nil
}

func (c *ConnectionRPC) AddMessage(args *nrpc.AddMessageArgs, ret *int) error {
	if connection, ok := GlobalStore.Get(args.ConnId) ; !ok {
		ret = 0
		return nil
	} 

	payload, err := Serialize(&SignboardMessage{command : PACKET_ADD, msgId : args.MsgId, msg : args.Msg})

	if err != nil {
		ret = 0
		return nil
	}
		
	_, err := connection.conn.Write(payload)
	
	if err != nil {
		ret = 0
		return nil
	}
	ret = 1
	return nil
}

func (c *ConnectionRPC) DeleteMessage(args *nrpc.DeleteMessageArgs, ret *int) error {
	if connection, ok := GlobalStore.Get(args.ConnId) ; !ok {
		ret = 0
		return nil
	} 

	payload, err := Serialize(&SignboardMessage{command : PACKET_DEL, msgId : args.MsgId})

	if err != nil {
		ret = 0
		return nil
	}
		
	_, err := connection.conn.Write(payload)
	
	if err != nil {
		ret = 0
		return nil
	}
	ret = 1
	return nil
}

func (c *ConnectionRPC) UpdateMessage(args *nrpc.UpdateMessageArgs, ret *int) error {
	if connection, ok := GlobalStore.Get(args.ConnId) ; !ok {
		ret = 0
		return nil
	} 

	payload, err := Serialize(&SignboardMessage{command : PACKET_UPT, msgId : args.MsgId, msg : args.Msg})

	if err != nil {
		ret = 0
		return nil
	}
		
	_, err := connection.conn.Write(payload)
	
	if err != nil {
		ret = 0
		return nil
	}
	ret = 1
	return nil
}



//func (c *ConnectionRPC) getAllConnection(args *

func (c *ConnectionRPC) Ping(args int, ret *int) error {
	ret = args
	return nil
}

	
	


package main

import (
	"net"
	"net/rpc"
)

type ConnectionRPC struct {}

func bindRPC() {
	cprc := &ConnectionRPC{}
	rpc.Register(c)

	go listen(Config.RPC)
}

func listen(addr string){
	listener, err := net.Listen("tcp", addr)
	if err != nil {
		log.Fatalf("RPC Listen failed")
		panic(err)
	}

	defer func(){
		if err := listener.Close(); err != nil {
			log.Fatalf("listener close error")
		}
	}()

	rpc.Accept(listener)
}

func (c *ConnectionRPC) ChangeBoardSetting(args *myrpc.PushArgs, ret *int) error{
	if args == nil || args.Token == "" {
		return errors.New("wrong argument")
	}

	conn, ok := GlobalStore.Get(args.Key)
	if !ok {
		log.Fatalf("Not exist connection key : %s", args.Key)
		return errors.New("not exist connection")
	}

	msg := &Message{command : "setting"}

	if err := conn.PushMessage(Serialize(msg)); err != nil {
		log.Fatalf("push wrtie failed")
		return err
	}
	return nil
}

func (c *ConnectionRPC) Ping(args int, ret *int) error {
	return nil
}

	
	

